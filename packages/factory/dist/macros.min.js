!function(r,e,a){const t=JSON.stringify(a.span),n=(r,e={})=>a.parseExpr(`{\n    "type": "${r}",\n    ${Object.entries(e).map((([r,e])=>'"'+r+'": '+(e?a.printExpr(e).code:void 0)))+","}\n    "span": ${t},\n  }`),i={type:"BooleanLiteral",span:a.span,value:!0},o={type:"BooleanLiteral",span:a.span,value:!1},l={type:"NullLiteral",span:a.span},p={type:"ArrayExpression",span:a.span,elements:[]},s=a.createExprMacro("$Identifier",(function(r){return n("Identifier",{value:r[0],optional:r[1]||o})}),"(value: string, optional?: boolean) => Identifier").proxy(e.createIdentifier),c=a.createExprMacro("$StringLiteral",(function(r){return n("StringLiteral",{value:r[0],raw:r[1]})}),"(value: string, raw?: string) => StringLiteral").proxy(e.createStringLiteral),u=a.createExprMacro("$NumericLiteral",(function(r){return n("NumericLiteral",{value:r[0],raw:r[1]})}),"(value: number, raw?: string) => NumericLiteral").proxy(e.createNumericLiteral),x=a.createExprMacro("$BigIntLiteral",(function(r){return n("BigIntLiteral",{value:r[0],raw:r[1]})}),"(value: bigint, raw?: string) => BigIntLiteral").proxy(e.createBigIntLiteral),g=a.createExprMacro("$BooleanLiteral",(function(r){return n("BooleanLiteral",{value:r[0]})}),"(value: boolean) => BooleanLiteral").proxy(e.createBooleanLiteral),$=a.createExprMacro("$RegExpLiteral",(function(r){return n("RegExpLiteral",{pattern:r[0],flags:r[1]})}),"(pattern: string, flags: string) => RegExpLiteral").proxy(e.createRegExpLiteral),L=a.createExprMacro("$Argument",(function(r){return this.parseExpr(`{\n    ${r[1]?'"spread": '+JSON.stringify(a.span)+",":""}\n    "expression": ${this.printExpr(r[0])}\n  }`)}),"(expression: Expression, spread?: boolean) => Argument").proxy(e.createArgument),E=a.createExprMacro("$CallExpression",(function(r){return n("CallExpression",{callee:r[0],arguments:r[1]||p,typeArguments:r[2]})}),"(callee: Expression | Super | Import, args?: Argument[], typeArguments?: TsTypeParameterInstantiation) => CallExpression").proxy(e.createCallExpression),m=a.createExprMacro("$Param",(function(r){return n("Parameter",{pat:r[0],decorators:r[1]})}),"(pat: Pattern, decorators?: Decorator[]) => Param"),y=a.createExprMacro("$Invalid",(function(){return n("Invalid")})).proxy(e.createInvalid);r.$Argument=L,r.$BigIntLiteral=x,r.$BooleanLiteral=g,r.$CallExpression=E,r.$False=o,r.$Identifier=s,r.$Invalid=y,r.$Null=l,r.$NumericLiteral=u,r.$Param=m,r.$RegExpLiteral=$,r.$StringLiteral=c,r.$True=i,r.$Void=p,r.createAst=n}({},FactoryRuntime,MacroCore);
