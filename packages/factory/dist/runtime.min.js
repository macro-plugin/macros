var e,t;e={},t=MacroCore,e.createArgument=(e,a)=>({spread:a?t.span:void 0,expression:e}),e.createArrayExpression=e=>({type:"ArrayExpression",elements:e,span:t.span}),e.createArrayPattern=(e,a=!1,p)=>({type:"ArrayPattern",elements:e,optional:a,typeAnnotation:p,span:t.span}),e.createArrowFunctionExpression=(e,a,p=!1,n=!1,s,r)=>({type:"ArrowFunctionExpression",params:e,body:a,async:p,generator:n,typeParameters:s,span:t.span,returnType:r}),e.createAssignmentExpression=(e,a,p)=>({type:"AssignmentExpression",operator:a,left:e,right:p,span:t.span}),e.createAssignmentPattern=(e,a,p)=>({type:"AssignmentPattern",left:e,right:a,typeAnnotation:p,span:t.span}),e.createAssignmentPatternProperty=(e,a)=>({type:"AssignmentPatternProperty",key:e,value:a,span:t.span}),e.createAssignmentProperty=(e,t)=>({type:"AssignmentProperty",key:e,value:t}),e.createAwaitExpression=e=>({type:"AwaitExpression",argument:e,span:t.span}),e.createBigIntLiteral=(e,a)=>({type:"BigIntLiteral",value:e,raw:a,span:t.span}),e.createBinaryExpression=(e,a,p)=>({type:"BinaryExpression",operator:a,left:e,right:p,span:t.span}),e.createBlockStatement=(e=[])=>({type:"BlockStatement",stmts:e,span:t.span}),e.createBooleanLiteral=e=>({type:"BooleanLiteral",value:e,span:t.span}),e.createBreakStatement=e=>({type:"BreakStatement",label:e,span:t.span}),e.createCallExpression=(e,a=[],p)=>({type:"CallExpression",span:t.span,callee:e,arguments:a,typeArguments:p}),e.createCatchClause=(e,a)=>({type:"CatchClause",param:a,body:e,span:t.span}),e.createClassDeclaration=(e,a,p,n,s,r,i,o=!1,y=!1)=>({type:"ClassDeclaration",identifier:e,declare:o,body:a,span:t.span,superClass:n,isAbstract:y,decorators:i,typeParams:s,superTypeParams:r,implements:p}),e.createClassExpression=(e,a=[],p,n,s,r,i,o=!1)=>({type:"ClassExpression",identifier:n,body:e,superClass:p,isAbstract:o,typeParams:s,superTypeParams:r,implements:a,decorators:i,span:t.span}),e.createClassMethod=(e,a,p,n,s=!1,r=!1,i=!1,o=!1)=>({type:"ClassMethod",key:a,function:p,kind:e,isStatic:o,accessibility:n,isAbstract:s,isOptional:r,isOverride:i,span:t.span}),e.createClassProperty=(e,a,p,n,s,r=!1,i=!1,o=!1,y=!1,c=!1,l=!1,m=!1)=>({type:"ClassProperty",span:t.span,decorators:s,key:e,isAbstract:o,declare:r,value:a,typeAnnotation:n,isStatic:l,accessibility:p,isOptional:y,isOverride:c,readonly:m,definite:i}),e.createComputedPropName=e=>({type:"Computed",expression:e,span:t.span}),e.createConditionalExpression=(e,a,p)=>({type:"ConditionalExpression",test:e,consequent:a,alternate:p,span:t.span}),e.createConstructor=(e,a,p,n,s=!1)=>({type:"Constructor",key:e,params:a,body:p,span:t.span,accessibility:n,isOptional:s}),e.createContinueStatement=e=>({type:"ContinueStatement",label:e,span:t.span}),e.createDebuggerStatement=()=>({type:"DebuggerStatement",span:t.span}),e.createDecorator=e=>({type:"Decorator",expression:e,span:t.span}),e.createDoWhileStatement=(e,a)=>({type:"DoWhileStatement",test:e,body:a,span:t.span}),e.createEmptyStatement=()=>({type:"EmptyStatement",span:t.span}),e.createExportAllDeclaration=(e,a)=>({type:"ExportAllDeclaration",source:e,asserts:a,span:t.span}),e.createExportDeclaration=e=>({type:"ExportDeclaration",declaration:e,span:t.span}),e.createExportDefaultDeclaration=e=>({type:"ExportDefaultDeclaration",decl:e,span:t.span}),e.createExportDefaultExpression=e=>({type:"ExportDefaultExpression",expression:e,span:t.span}),e.createExportDefaultSpecifier=e=>({type:"ExportDefaultSpecifier",exported:e,span:t.span}),e.createExportNamedDeclaration=(e,a,p,n=!1)=>({type:"ExportNamedDeclaration",specifiers:e,source:a,typeOnly:n,asserts:p,span:t.span}),e.createExportNamespaceSpecifier=e=>({type:"ExportNamespaceSpecifier",name:e,span:t.span}),e.createExprOrSpread=(e,t)=>({spread:t,expression:e}),e.createExpressionStatement=e=>({type:"ExpressionStatement",expression:e,span:t.span}),e.createForInStatement=(e,a,p)=>({type:"ForInStatement",left:e,right:a,body:p,span:t.span}),e.createForOfStatement=(e,a,p,n)=>({type:"ForOfStatement",await:n,left:e,right:a,body:p,span:t.span}),e.createForStatement=(e,a,p,n)=>({type:"ForStatement",init:a,test:p,update:n,body:e,span:t.span}),e.createFunctionDeclaration=(e,a,p,n,s,r,i=!1,o=!1,y=!1)=>({type:"FunctionDeclaration",span:t.span,params:a,body:p,generator:y,async:o,decorators:r,typeParameters:n,returnType:s,identifier:e,declare:i}),e.createFunctionExpression=(e,a,p,n,s,r,i=!1,o=!1)=>({type:"FunctionExpression",params:e,decorators:r,body:a,generator:o,async:i,typeParameters:n,returnType:s,identifier:p,span:t.span}),e.createGetterProperty=(e,a,p)=>({type:"GetterProperty",typeAnnotation:p,body:a,key:e,span:t.span}),e.createIdentifier=(e,a=!1)=>({type:"Identifier",value:e,optional:a,span:t.span}),e.createIfStatement=(e,a,p)=>({type:"IfStatement",test:e,consequent:a,alternate:p,span:t.span}),e.createImport=()=>({type:"Import",span:t.span}),e.createImportDeclaration=(e,a,p=!1,n)=>({type:"ImportDeclaration",specifiers:e,source:a,typeOnly:p,asserts:n,span:t.span}),e.createImportDefaultSpecifier=e=>({type:"ImportDefaultSpecifier",local:e,span:t.span}),e.createImportNamespaceSpecifier=e=>({type:"ImportNamespaceSpecifier",local:e,span:t.span}),e.createInvalid=()=>({type:"Invalid",span:t.span}),e.createJSXAttribute=(e,a)=>({type:"JSXAttribute",name:e,value:a,span:t.span}),e.createJSXClosingElement=e=>({type:"JSXClosingElement",name:e,span:t.span}),e.createJSXClosingFragment=()=>({type:"JSXClosingFragment",span:t.span}),e.createJSXElement=(e,a=[],p)=>({type:"JSXElement",opening:e,children:a,closing:p,span:t.span}),e.createJSXEmptyExpression=()=>({type:"JSXEmptyExpression",span:t.span}),e.createJSXExpressionContainer=e=>({type:"JSXExpressionContainer",expression:e,span:t.span}),e.createJSXFragment=(e,a=[],p)=>({type:"JSXFragment",opening:e,children:a,closing:p,span:t.span}),e.createJSXMemberExpression=(e,t)=>({type:"JSXMemberExpression",object:e,property:t}),e.createJSXNamespacedName=(e,t)=>({type:"JSXNamespacedName",namespace:e,name:t}),e.createJSXOpeningElement=(e,a,p=!1,n)=>({type:"JSXOpeningElement",name:e,attributes:a,selfClosing:p,typeArguments:n,span:t.span}),e.createJSXOpeningFragment=()=>({type:"JSXOpeningFragment",span:t.span}),e.createJSXSpreadChild=e=>({type:"JSXSpreadChild",expression:e,span:t.span}),e.createJSXText=(e,a=JSON.stringify(e))=>({type:"JSXText",value:e,raw:a,span:t.span}),e.createKeyValuePatternProperty=(e,t)=>({type:"KeyValuePatternProperty",key:e,value:t}),e.createKeyValueProperty=(e,t)=>({type:"KeyValueProperty",value:t,key:e}),e.createLabeledStatement=(e,a)=>({type:"LabeledStatement",label:e,body:a,span:t.span}),e.createMemberExpression=(e,a)=>({type:"MemberExpression",object:e,property:a,span:t.span}),e.createMetaProperty=e=>({type:"MetaProperty",kind:e,span:t.span}),e.createMethodProperty=(e,a,p,n=!1,s=!1,r,i,o)=>({type:"MethodProperty",key:e,span:t.span,params:a,body:p,async:n,generator:s,decorators:r,typeParameters:i,returnType:o}),e.createModule=(e=[],a)=>({type:"Module",body:e,span:t.span,interpreter:a}),e.createNamedExportSpecifier=(e,a,p=!1)=>({type:"ExportSpecifier",orig:e,span:t.span,exported:a,isTypeOnly:p}),e.createNamedImportSpecifier=(e,a,p=!1)=>({type:"ImportSpecifier",local:e,imported:a,isTypeOnly:p,span:t.span}),e.createNewExpression=(e,a,p)=>({type:"NewExpression",callee:e,arguments:a,typeArguments:p,span:t.span}),e.createNullLiteral=()=>({type:"NullLiteral",span:t.span}),e.createNumericLiteral=(e,a)=>({type:"NumericLiteral",value:e,raw:a,span:t.span}),e.createObjectExpression=e=>({type:"ObjectExpression",properties:e,span:t.span}),e.createObjectPattern=(e,a=!1,p)=>({type:"ObjectPattern",properties:e,optional:a,typeAnnotation:p,span:t.span}),e.createOptionalChainingCall=(e,a=[],p)=>({type:"CallExpression",callee:e,arguments:a,typeArguments:p,span:t.span}),e.createOptionalChainingExpression=(e,a)=>({type:"OptionalChainingExpression",questionDotToken:a,base:e,span:t.span}),e.createParam=(e,a)=>({type:"Parameter",pat:e,decorators:a,span:t.span}),e.createParenthesisExpression=e=>({type:"ParenthesisExpression",expression:e,span:t.span}),e.createPrivateMethod=(e,a,p,n,s=!1,r=!1,i=!1,o=!1)=>({type:"PrivateMethod",key:a,function:p,kind:e,isStatic:o,accessibility:n,isAbstract:s,isOptional:r,isOverride:i,span:t.span}),e.createPrivateName=e=>({type:"PrivateName",id:e,span:t.span}),e.createPrivateProperty=(e,a,p,n,s,r=!1,i=!1,o=!1,y=!1,c=!1)=>({type:"PrivateProperty",key:e,value:a,span:t.span,decorators:s,typeAnnotation:n,accessibility:p,definite:r,isOptional:i,isOverride:o,isStatic:y,readonly:c}),e.createRegExpLiteral=(e,a)=>({type:"RegExpLiteral",pattern:e,flags:a,span:t.span}),e.createRestElement=(e,a,p)=>({type:"RestElement",rest:a,argument:e,typeAnnotation:p,span:t.span}),e.createReturnStatement=e=>({type:"ReturnStatement",argument:e,span:t.span}),e.createScript=(e=[],a)=>({type:"Script",body:e,span:t.span,interpreter:a}),e.createSequenceExpression=e=>({type:"SequenceExpression",expressions:e,span:t.span}),e.createSetterProperty=(e,a,p)=>({type:"SetterProperty",param:a,body:p,key:e,span:t.span}),e.createSpreadElement=(e,t)=>({type:"SpreadElement",spread:t,arguments:e}),e.createStaticBlock=e=>({type:"StaticBlock",body:e,span:t.span}),e.createStringLiteral=(e,a)=>({type:"StringLiteral",value:e,raw:a,span:t.span}),e.createSuper=()=>({type:"Super",span:t.span}),e.createSuperPropExpression=(e,a)=>({type:"SuperPropExpression",obj:e,property:a,span:t.span}),e.createSwitchCase=(e,a=[])=>({type:"SwitchCase",test:e,consequent:a,span:t.span}),e.createSwitchStatement=(e,a=[])=>({type:"SwitchStatement",discriminant:e,cases:a,span:t.span}),e.createTaggedTemplateExpression=(e,a,p)=>({type:"TaggedTemplateExpression",tag:e,typeParameters:p,span:t.span,template:a}),e.createTemplateElement=(e,a,p=!1)=>({type:"TemplateElement",tail:p,cooked:a,raw:e,span:t.span}),e.createTemplateLiteral=(e=[],a=[])=>({type:"TemplateLiteral",expressions:e,quasis:a,span:t.span}),e.createThisExpression=()=>({type:"ThisExpression",span:t.span}),e.createThrowStatement=e=>({type:"ThrowStatement",argument:e,span:t.span}),e.createTryStatement=(e,a,p)=>({type:"TryStatement",block:e,handler:a,finalizer:p,span:t.span}),e.createTsArrayType=e=>({type:"TsArrayType",elemType:e,span:t.span}),e.createTsAsExpression=(e,a)=>({type:"TsAsExpression",expression:e,typeAnnotation:a,span:t.span}),e.createTsCallSignatureDeclaration=(e,a,p)=>({type:"TsCallSignatureDeclaration",params:e,typeAnnotation:a,typeParams:p,span:t.span}),e.createTsConditionalType=(e,a,p,n)=>({type:"TsConditionalType",checkType:e,extendsType:a,trueType:p,falseType:n,span:t.span}),e.createTsConstAssertion=e=>({type:"TsConstAssertion",expression:e,span:t.span}),e.createTsConstructSignatureDeclaration=(e=[],a,p)=>({type:"TsConstructSignatureDeclaration",params:e,typeAnnotation:a,typeParams:p,span:t.span}),e.createTsConstructorType=(e,a,p,n=!1)=>({type:"TsConstructorType",params:e,typeParams:p,typeAnnotation:a,isAbstract:n,span:t.span}),e.createTsEnumDeclaration=(e,a=[],p=!1,n=!1)=>({type:"TsEnumDeclaration",declare:p,isConst:n,id:e,members:a,span:t.span}),e.createTsEnumMember=(e,a)=>({type:"TsEnumMember",id:e,init:a,span:t.span}),e.createTsExportAssignment=e=>({type:"TsExportAssignment",expression:e,span:t.span}),e.createTsExpressionWithTypeArguments=(e,a)=>({type:"TsExpressionWithTypeArguments",expression:e,typeArguments:a,span:t.span}),e.createTsExternalModuleReference=e=>({type:"TsExternalModuleReference",expression:e,span:t.span}),e.createTsFunctionType=(e,a,p)=>({type:"TsFunctionType",params:e,typeParams:p,typeAnnotation:a,span:t.span}),e.createTsGetterSignature=(e,a,p=!1,n=!1,s=!1)=>({type:"TsGetterSignature",readonly:s,key:e,computed:p,optional:n,typeAnnotation:a,span:t.span}),e.createTsImportEqualsDeclaration=(e,a,p=!1,n=!1,s=!1)=>({type:"TsImportEqualsDeclaration",declare:p,isExport:n,isTypeOnly:s,id:e,moduleRef:a,span:t.span}),e.createTsImportType=(e,a,p)=>({type:"TsImportType",argument:e,qualifier:a,typeArguments:p,span:t.span}),e.createTsIndexSignature=(e,a,p=!1,n=!1)=>({type:"TsIndexSignature",params:e,typeAnnotation:a,readonly:p,static:n,span:t.span}),e.createTsIndexedAccessType=(e,a,p=!1)=>({type:"TsIndexedAccessType",readonly:p,objectType:e,indexType:a,span:t.span}),e.createTsInferType=e=>({type:"TsInferType",typeParam:e,span:t.span}),e.createTsInstantiation=(e,a)=>({type:"TsInstantiation",expression:e,typeArguments:a,span:t.span}),e.createTsInterfaceBody=(e=[])=>({type:"TsInterfaceBody",body:e,span:t.span}),e.createTsInterfaceDeclaration=(e,a,p=[],n,s=!1)=>({type:"TsInterfaceDeclaration",id:e,declare:s,typeParams:n,extends:p,body:a,span:t.span}),e.createTsIntersectionType=(e=[])=>({type:"TsIntersectionType",types:e,span:t.span}),e.createTsKeywordType=e=>({type:"TsKeywordType",kind:e,span:t.span}),e.createTsLiteralType=e=>({type:"TsLiteralType",literal:e,span:t.span}),e.createTsMappedType=(e,a,p,n,s)=>({type:"TsMappedType",readonly:s,typeParam:e,nameType:p,optional:n,typeAnnotation:a,span:t.span}),e.createTsMethodSignature=(e,a,p,n,s=!1,r=!1,i=!1)=>({type:"TsMethodSignature",readonly:i,key:e,computed:s,optional:r,params:a,typeAnn:p,typeParams:n,span:t.span}),e.createTsModuleBlock=e=>({type:"TsModuleBlock",body:e,span:t.span}),e.createTsModuleDeclaration=(e,a,p=!1,n=!1)=>({type:"TsModuleDeclaration",declare:p,global:n,id:e,body:a,span:t.span}),e.createTsNamespaceDeclaration=(e,a,p=!1,n=!1)=>({type:"TsNamespaceDeclaration",declare:p,global:n,id:e,body:a,span:t.span}),e.createTsNamespaceExportDeclaration=e=>({type:"TsNamespaceExportDeclaration",id:e,span:t.span}),e.createTsNonNullExpression=e=>({type:"TsNonNullExpression",expression:e,span:t.span}),e.createTsOptionalType=e=>({type:"TsOptionalType",typeAnnotation:e,span:t.span}),e.createTsParameterProperty=(e,a,p,n=!1,s=!1)=>({type:"TsParameterProperty",decorators:p,accessibility:a,override:n,readonly:s,param:e,span:t.span}),e.createTsParenthesizedType=e=>({type:"TsParenthesizedType",typeAnnotation:e,span:t.span}),e.createTsPropertySignature=(e,a,p,n,s,r=!1,i=!1,o=!1)=>({type:"TsPropertySignature",readonly:o,key:e,computed:r,optional:i,init:p,params:a,typeAnnotation:n,typeParams:s,span:t.span}),e.createTsQualifiedName=(e,t)=>({type:"TsQualifiedName",left:e,right:t}),e.createTsRestType=e=>({type:"TsRestType",typeAnnotation:e,span:t.span}),e.createTsSetterSignature=(e,a,p=!1,n=!1,s=!1)=>({type:"TsSetterSignature",readonly:s,key:e,computed:p,optional:n,param:a,span:t.span}),e.createTsTemplateLiteralType=(e=[],a=[])=>({type:"TemplateLiteral",types:e,quasis:a,span:t.span}),e.createTsThisType=()=>({type:"TsThisType",span:t.span}),e.createTsTupleElement=(e,a)=>({type:"TsTupleElement",label:a,ty:e,span:t.span}),e.createTsTupleType=(e=[])=>({type:"TsTupleType",elemTypes:e,span:t.span}),e.createTsTypeAliasDeclaration=(e,a,p,n=!1)=>({type:"TsTypeAliasDeclaration",declare:n,id:e,typeParams:p,typeAnnotation:a,span:t.span}),e.createTsTypeAnnotation=e=>({type:"TsTypeAnnotation",typeAnnotation:e,span:t.span}),e.createTsTypeAssertion=(e,a)=>({type:"TsTypeAssertion",expression:e,typeAnnotation:a,span:t.span}),e.createTsTypeLiteral=(e=[])=>({type:"TsTypeLiteral",members:e,span:t.span}),e.createTsTypeOperator=(e,a)=>({type:"TsTypeOperator",op:e,typeAnnotation:a,span:t.span}),e.createTsTypeParameter=(e,a,p,n,s)=>({type:"TsTypeParameter",name:e,in:a,out:p,constraint:n,default:s,span:t.span}),e.createTsTypeParameterDeclaration=(e=[])=>({type:"TsTypeParameterDeclaration",parameters:e,span:t.span}),e.createTsTypeParameterInstantiation=(e=[])=>({type:"TsTypeParameterInstantiation",params:e,span:t.span}),e.createTsTypePredicate=(e,a=!1,p)=>({type:"TsTypePredicate",asserts:a,paramName:e,typeAnnotation:p,span:t.span}),e.createTsTypeQuery=(e,a)=>({type:"TsTypeQuery",exprName:e,typeArguments:a,span:t.span}),e.createTsTypeReference=(e,a)=>({type:"TsTypeReference",typeName:e,typeParams:a,span:t.span}),e.createTsUnionType=(e=[])=>({type:"TsUnionType",types:e,span:t.span}),e.createUnaryExpression=(e,a)=>({type:"UnaryExpression",span:t.span,operator:e,argument:a}),e.createUpdateExpression=(e,a,p=!1)=>({type:"UpdateExpression",operator:e,prefix:p,argument:a,span:t.span}),e.createVariableDeclaration=(e,a,p)=>({type:"VariableDeclaration",kind:e,declare:a,declarations:p,span:t.span}),e.createVariableDeclarator=(e,a,p)=>({type:"VariableDeclarator",id:e,definite:a,init:p,span:t.span}),e.createWhileStatement=(e,a)=>({type:"WhileStatement",test:e,body:a,span:t.span}),e.createWithStatement=(e,a)=>({type:"WithStatement",object:e,body:a,span:t.span}),e.createYieldExpression=(e,a=!1)=>({type:"YieldExpression",argument:e,delegate:a,span:t.span});
