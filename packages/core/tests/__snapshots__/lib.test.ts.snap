// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$Ast macro 1`] = `
"const i = {
    "type": "Identifier",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "value": "abc",
    "optional": false
};
const d = {
    "type": "Identifier",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "value": "abc",
    "optional": false
};
const a = {
    "type": "StringLiteral",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "value": "hello",
    "raw": "'hello'"
};
const b = {
    "type": "BinaryExpression",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "operator": "+",
    "left": {
        "type": "NumericLiteral",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "value": 1,
        "raw": "1"
    },
    "right": {
        "type": "NumericLiteral",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "value": 2,
        "raw": "2"
    }
};
const c = {
    "type": "BinaryExpression",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "operator": "*",
    "left": {
        "type": "Identifier",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "value": "a",
        "optional": false
    },
    "right": {
        "type": "NumericLiteral",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "value": 3,
        "raw": "3"
    }
};
"
`;

exports[`$Env macro 1`] = `
"const e = "test";
const s = "test";
const b = false;
const n = 0;
"
`;

exports[`$Include macro 1`] = `
"(()=>{
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    _exportStar(require("./runtime"), exports);
    _exportStar(require("./macros"), exports);
    function _exportStar(from, to) {
        Object.keys(from).forEach(function(k) {
            if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        });
        return from;
    }
})();
"
`;

exports[`$Quote macro 1`] = `
"declare global {
    const $Ast: <T>(expr: T) => import("@swc/core").Expression;
    const $Expr: (strings: TemplateStringsArray, ...expressions: unknown[]) => import("@swc/core").Expression;
    const $Quote: (strings: TemplateStringsArray, ...expressions: unknown[]) => (import("@swc/core").Expression)[];
}
export {}
"
`;

exports[`$Quote macro 2`] = `
"const someNumber = {
    "type": "NumericLiteral",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "value": 5,
    "raw": "5"
};
const someIdent = {
    "type": "Identifier",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "value": "hello",
    "optional": false
};
const someExpr = {
    "type": "BinaryExpression",
    "span": {
        "start": 0,
        "end": 0,
        "ctxt": 0
    },
    "operator": "+",
    "left": {
        "type": "NumericLiteral",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "value": 3,
        "raw": "3"
    },
    "right": someNumber
};
const tokens = [
    {
        "type": "VariableDeclaration",
        "span": {
            "start": 0,
            "end": 0,
            "ctxt": 0
        },
        "kind": "let",
        "declare": false,
        "declarations": [
            {
                "type": "VariableDeclarator",
                "span": {
                    "start": 0,
                    "end": 0,
                    "ctxt": 0
                },
                "id": someIdent,
                "init": someExpr,
                "definite": false
            }
        ]
    }
];
"
`;

exports[`$Stringify macro 1`] = `
"const a = "abc";
const b = '"abc"';
const c = "1 + 2";
const d = "hello(1, 2)";
const e = "number | string";
"
`;
