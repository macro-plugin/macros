// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create literal macro 1`] = `
"if (true) {
    console.log("development");
}
"
`;

exports[`should allow ast for more complex value 1`] = `
"const expr = call("hello", "world");
"
`;

exports[`should pass overwrited variable 1`] = `
"const before = true;
function testDev(__DEV__) {
    if (__DEV__) {
        console.log("development");
    }
}
const after = true;
"
`;

exports[`should support all jsonable values 1`] = `
"const a = 123;
const b = "Hello World";
const c = false;
const d = null;
const e = undefined;
const f = ()=>true;
const e = [
    1,
    2,
    3
];
const g = {
    "a": 1,
    "b": 2
};
const h = /.*/g;
"
`;

exports[`should support all jsonable values 2`] = `
"declare global {
    const __num__: number;
    const __str__: string;
    const __bool__: boolean;
    const __null__: null;
    const __undefined__: undefined;
    const __function__: () => true;
    const __array__: number[];
    const __object__: Record<string, number>;
    const __regex__: RegExp;
}
export {}
"
`;

exports[`should support pass an object 1`] = `
"const a = 123;
const b = "Hello World";
const c = false;
const d = null;
const e = undefined;
const f = ()=>true;
const e = [
    1,
    2,
    3
];
const g = {
    "a": 1,
    "b": 2
};
const h = /.*/g;
const i = call("hello", "world");
"
`;

exports[`should support pass an object 2`] = `
"declare global {
    const __num__: number;
    const __str__: string;
    const __bool__: boolean;
    const __null__: null;
    const __undefined__: undefined;
    const __function__: () => true;
    const __array__: number[];
    const __object__: Record<string, number>;
    const __regex__: RegExp;
    const __expr__: string;
}
export {}
"
`;

exports[`use as swc plugin 1`] = `
"if (true) {
    console.log("development");
}
"
`;

exports[`use with swc transform ast 1`] = `
"var a = "Hello";
if (true) {
    console.log("development");
}
"
`;
